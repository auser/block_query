package grammar

type BlockQuery Peg {
}

# Rules
Result <- queryStmt !.

queryStmt <- selectStmt (space queryExprs)*

queryExprs <- queryExpr (space queryExpr)*
queryExpr <- limitStmt / orderStmt / whereStmt

selectStmt <- select space (star / WordList) space fromStmt
fromStmt <- from Word
limitStmt <- limit DecimalNumeral
orderStmt <- order by WordList

whereStmt <- where whereExprs
whereExprs <- whereExpr (space (and / or) whereExpr)*
whereExpr <- (
  Word equals StringLiteral
  / Word greaterThan DecimalNumeral
)

select <- "SELECT" space
from <- "FROM" space
order <- "ORDER" space
by <- "BY" space
star <- ('*' / "ALL") space
limit <- "LIMIT" space
where <- "WHERE" space
and <- "AND" space
or <- "OR" space
greaterThan <- space? '>' space?

equals <- space? "=" space?

squote <- '\''
dquote <- '\"'

# Token matchers
Letter <- [[a-z]]
LetterOrDigit <- [[a-z]] / [0-9]

HexDigit <- [[a-f]] / [0-9]
DecimalNumeral <- '0' / [0-9] ([_]* [0-9])*

StringLiteral <- (squote / dquote)? (Escape / !["\\\n\r] .)* (squote / dquote)?
Escape <- '\\' ([btnfr"'\\] / OctalEscape / UnicodeEscape)
OctalEscape
   <- [0-3][0-7][0-7]
    / [0-7][0-7]
    / [0-7]

UnicodeEscape
   <- 'u'+ HexDigit HexDigit HexDigit HexDigit

WordList <- Word (space ',' space? WordList)*
Word <- (squote / dquote)? < Letter LetterOrDigit* > (squote / dquote)? {}

space <- ( [ \t\r\n]+              # WhiteSpace [ \t\r\n\u000C]+
      / '/*' (!'*/' .)* '*/'      # TraditionalComment
      / '//' (![\r\n] .)* [\r\n]  # EndOfLineComment
      )*
