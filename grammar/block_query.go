// Code generated by goyacc -v grammar/y.output -o grammar/block_query.go grammar/block_query.y. DO NOT EDIT.

//line grammar/block_query.y:6
package grammar

import __yyfmt__ "fmt"

//line grammar/block_query.y:6
import (
	// "strconv"
	"github.com/auser/block_query/value"
)

//line grammar/block_query.y:15
type yySymType struct {
	yys         int
	program     []Statement
	empty       struct{}
	statement   Statement
	queryexpr   QueryExpression
	queryexprs  []QueryExpression
	expression  Expression
	expressions []Expression
	identifier  Identifier
	variable    Variable
	variables   []Variable
	token       Token
	table       Table
}

const LEX_ERROR = 57346
const recursive = 57347
const IDENTIFIER = 57348
const STRING = 57349
const INTEGER = 57350
const FLOAT = 57351
const BOOLEAN = 57352
const TERNARY = 57353
const DATETIME = 57354
const VARIABLE = 57355
const FLAG = 57356
const SELECT = 57357
const FROM = 57358
const WITH = 57359
const ORDER = 57360
const BY = 57361
const LIMIT = 57362
const OFFSET = 57363
const PARTITION = 57364
const TABLES = 57365
const AS = 57366
const VIEWS = 57367
const CURSORS = 57368
const FUNCTIONS = 57369
const FUNCTION_NTH = 57370
const FUNCTION_WITH_INS = 57371
const COMPARISON_OP = 57372
const STRING_OP = 57373
const SUBSTITUTION_OP = 57374
const PERCENT = 57375
const STDIN = 57376
const AND = 57377
const OR = 57378
const NOT = 57379
const ASC = 57380
const DESC = 57381
const FIRST = 57382
const LAST = 57383
const ERROR = 57384
const UMINUS = 57385
const COUNT = 57386
const LISTAGG = 57387
const ROWS = 57388
const AGGREGATE_FUNCTION = 57389
const ANALYTIC_FUNCTION = 57390
const ALL = 57391
const NULLS = 57392
const NULL = 57393
const IN = 57394
const EXISTS = 57395
const TIES = 57396
const FIELDS = 57397
const DISTINCT = 57398
const UNION = 57399
const EXCEPT = 57400
const INTERSECT = 57401
const CROSS = 57402
const FULL = 57403
const NATURAL = 57404
const JOIN = 57405
const IS = 57406
const BETWEEN = 57407
const LIKE = 57408
const UPLUS = 57409

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"recursive",
	"IDENTIFIER",
	"STRING",
	"INTEGER",
	"FLOAT",
	"BOOLEAN",
	"TERNARY",
	"DATETIME",
	"VARIABLE",
	"FLAG",
	"SELECT",
	"FROM",
	"WITH",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"PARTITION",
	"TABLES",
	"AS",
	"VIEWS",
	"CURSORS",
	"FUNCTIONS",
	"FUNCTION_NTH",
	"FUNCTION_WITH_INS",
	"COMPARISON_OP",
	"STRING_OP",
	"SUBSTITUTION_OP",
	"PERCENT",
	"STDIN",
	"AND",
	"OR",
	"NOT",
	"ASC",
	"DESC",
	"FIRST",
	"LAST",
	"ERROR",
	"UMINUS",
	"COUNT",
	"LISTAGG",
	"ROWS",
	"AGGREGATE_FUNCTION",
	"ANALYTIC_FUNCTION",
	"ALL",
	"NULLS",
	"NULL",
	"IN",
	"EXISTS",
	"TIES",
	"FIELDS",
	"'*'",
	"';'",
	"'='",
	"'('",
	"')'",
	"'-'",
	"'+'",
	"'!'",
	"DISTINCT",
	"UNION",
	"EXCEPT",
	"INTERSECT",
	"CROSS",
	"FULL",
	"NATURAL",
	"JOIN",
	"IS",
	"BETWEEN",
	"LIKE",
	"'/'",
	"'%'",
	"UPLUS",
	"','",
	"'.'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line grammar/block_query.y:729
func SetDebugLevel(level int, verbose bool) {
	yyDebug = level
	yyErrorVerbose = verbose
}

func Parse(s string, sourceFile string) ([]Statement, error) {
	l := new(Lexer)
	l.Init(s, sourceFile)
	yyParse(l)
	return l.program, l.err
}

//line yacctab:1
var yyExca = [...]int{
	-1, 0,
	15, 48,
	-2, 1,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 7,
	15, 48,
	-2, 1,
	-1, 62,
	30, 67,
	58, 67,
	-2, 125,
	-1, 155,
	30, 0,
	52, 0,
	58, 0,
	-2, 72,
	-1, 156,
	30, 0,
	52, 0,
	58, 0,
	-2, 74,
	-1, 206,
	30, 97,
	31, 97,
	35, 97,
	36, 97,
	37, 97,
	52, 97,
	56, 97,
	58, 97,
	61, 97,
	62, 97,
	75, 97,
	76, 97,
	-2, 61,
	-1, 207,
	30, 98,
	31, 98,
	35, 98,
	36, 98,
	37, 98,
	52, 98,
	56, 98,
	58, 98,
	61, 98,
	62, 98,
	75, 98,
	76, 98,
	-2, 62,
}

const yyPrivate = 57344

const yyLast = 814

var yyAct = [...]int{

	103, 4, 93, 172, 136, 54, 173, 174, 4, 80,
	56, 62, 95, 139, 42, 142, 22, 19, 51, 184,
	144, 49, 69, 115, 106, 109, 108, 100, 114, 113,
	48, 21, 112, 109, 108, 124, 20, 213, 119, 118,
	112, 211, 116, 117, 69, 210, 123, 111, 101, 49,
	104, 115, 99, 110, 208, 111, 114, 113, 48, 115,
	207, 110, 206, 171, 114, 113, 124, 115, 109, 108,
	116, 117, 205, 119, 118, 112, 121, 197, 116, 117,
	192, 170, 183, 169, 150, 149, 116, 117, 209, 88,
	111, 158, 137, 131, 115, 143, 110, 7, 135, 114,
	113, 132, 175, 49, 128, 129, 125, 186, 151, 69,
	153, 160, 48, 116, 117, 148, 170, 189, 43, 203,
	204, 157, 55, 159, 89, 152, 120, 176, 146, 147,
	198, 108, 178, 130, 107, 179, 182, 11, 91, 180,
	181, 159, 159, 92, 98, 40, 41, 69, 16, 6,
	187, 141, 18, 10, 185, 99, 115, 188, 13, 87,
	1, 114, 113, 45, 44, 102, 121, 47, 14, 67,
	190, 122, 159, 66, 64, 116, 117, 193, 191, 61,
	126, 127, 194, 196, 195, 133, 134, 137, 65, 199,
	74, 200, 60, 201, 138, 59, 202, 63, 76, 145,
	97, 96, 58, 52, 53, 90, 39, 15, 8, 55,
	212, 154, 155, 156, 12, 5, 161, 162, 163, 164,
	165, 166, 167, 168, 17, 9, 3, 2, 0, 23,
	71, 72, 73, 0, 85, 75, 84, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 26, 98, 27, 28,
	29, 36, 37, 0, 0, 0, 0, 0, 0, 0,
	82, 0, 0, 0, 0, 38, 0, 94, 33, 30,
	79, 35, 0, 25, 86, 0, 81, 24, 31, 0,
	0, 0, 68, 0, 77, 78, 83, 20, 23, 71,
	72, 73, 0, 85, 75, 84, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 26, 0, 27, 28, 29,
	36, 37, 0, 0, 0, 0, 0, 0, 0, 82,
	0, 0, 0, 0, 38, 0, 94, 33, 30, 79,
	35, 0, 25, 86, 0, 81, 24, 31, 57, 0,
	0, 68, 0, 77, 78, 83, 23, 71, 72, 73,
	0, 85, 75, 84, 0, 0, 0, 6, 0, 0,
	0, 0, 0, 26, 0, 27, 28, 29, 36, 37,
	0, 0, 0, 0, 0, 0, 0, 82, 0, 0,
	0, 0, 38, 0, 94, 33, 30, 79, 35, 0,
	25, 86, 0, 81, 24, 31, 0, 0, 0, 68,
	0, 77, 78, 83, 23, 71, 72, 73, 0, 85,
	75, 84, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 26, 0, 27, 28, 29, 36, 37, 0, 0,
	0, 0, 0, 0, 0, 82, 0, 0, 0, 0,
	38, 0, 70, 33, 30, 79, 35, 0, 25, 86,
	0, 81, 24, 31, 57, 0, 0, 68, 0, 77,
	78, 83, 23, 71, 72, 73, 0, 85, 75, 84,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 26,
	0, 27, 28, 29, 36, 37, 0, 0, 0, 0,
	0, 0, 0, 82, 0, 0, 0, 0, 38, 0,
	94, 33, 30, 79, 35, 0, 25, 86, 0, 81,
	24, 31, 0, 0, 0, 68, 0, 77, 78, 83,
	23, 71, 72, 73, 0, 85, 75, 84, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 26, 0, 27,
	28, 29, 36, 37, 0, 0, 0, 0, 0, 0,
	0, 82, 0, 0, 0, 0, 38, 0, 70, 33,
	30, 79, 35, 0, 25, 86, 141, 81, 24, 31,
	0, 0, 0, 68, 0, 77, 78, 83, 0, 109,
	108, 0, 140, 0, 119, 118, 112, 109, 108, 0,
	0, 0, 119, 118, 112, 109, 108, 0, 0, 0,
	119, 111, 112, 0, 0, 115, 0, 110, 0, 111,
	114, 113, 0, 115, 0, 110, 0, 111, 114, 113,
	0, 115, 0, 110, 116, 117, 114, 113, 23, 0,
	0, 0, 116, 117, 0, 0, 0, 0, 0, 6,
	116, 117, 0, 0, 0, 26, 0, 27, 28, 29,
	36, 37, 0, 0, 0, 0, 50, 0, 0, 0,
	0, 0, 0, 23, 38, 0, 32, 33, 30, 34,
	35, 0, 25, 0, 0, 0, 24, 31, 0, 0,
	26, 46, 27, 28, 29, 36, 37, 0, 0, 0,
	0, 50, 0, 0, 0, 0, 0, 0, 23, 38,
	177, 32, 33, 30, 34, 35, 0, 25, 0, 0,
	0, 24, 31, 0, 0, 26, 46, 27, 28, 29,
	36, 37, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 23, 0, 0, 38, 0, 32, 33, 30, 34,
	35, 0, 25, 0, 0, 0, 24, 31, 26, 105,
	27, 28, 29, 36, 37, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 23, 0, 0, 38, 0, 32,
	33, 30, 34, 35, 0, 25, 0, 0, 0, 24,
	31, 26, 0, 27, 28, 29, 36, 37, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	38, 0, 32, 33, 30, 34, 35, 0, 25, 0,
	0, 0, 24, 31,
}
var yyPact = [...]int{

	132, -1000, 40, -1000, -1000, 138, 153, 132, 130, 136,
	-28, -1000, -47, 758, -1000, 125, 127, -1000, 657, 398,
	-1000, 153, 65, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 117,
	456, 514, -1000, -51, -1000, 758, 622, 725, -1000, -1000,
	-1000, -1000, -54, 110, -1000, 557, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 94, -1000, 340, -13,
	47, -1000, -1000, -1000, -1000, -1000, -1000, 456, 456, 45,
	75, 42, 456, 456, -1000, -1000, -1000, -1000, 39, 758,
	-1000, 456, 549, -44, 36, -1000, -58, 90, 557, -1000,
	657, -1000, 25, 24, -1000, 758, 398, 758, 456, 456,
	456, 32, 59, 456, 456, 456, 456, 456, 456, 456,
	456, 23, 3, 223, 692, -28, -1000, -1000, -28, 32,
	32, -1000, 132, -5, -1000, 132, 22, -59, 557, -1000,
	134, 53, -28, -28, 514, 67, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -33, 100, 100, -1000, 340, -1000,
	32, 11, 11, -1000, -1000, -1000, 565, -5, 557, -1000,
	456, -1000, 20, 456, -1000, 38, -1000, -1000, 282, 456,
	-1000, -1000, 17, 106, 758, -1000, -1000, 282, -1000, 79,
	-1000, -1000, -1000, 12, 2, 0, -6, -1000, 29, -1000,
	-15, -19, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 132,
	-1000, -1000, -23, -1000,
}
var yyPgo = [...]int{

	0, 160, 227, 226, 0, 225, 224, 14, 4, 118,
	215, 214, 137, 208, 207, 206, 13, 205, 204, 203,
	18, 203, 202, 102, 7, 5, 3, 12, 201, 9,
	201, 200, 199, 198, 197, 196, 195, 192, 190, 188,
	179, 11, 174, 173, 173, 169, 167, 164, 163, 10,
	2, 163, 6, 163, 163,
}
var yyR1 = [...]int{

	0, 1, 1, 1, 2, 3, 4, 13, 5, 6,
	6, 14, 14, 27, 27, 28, 28, 31, 31, 32,
	32, 32, 35, 35, 15, 15, 15, 16, 16, 17,
	17, 18, 18, 19, 19, 19, 7, 7, 9, 9,
	9, 9, 46, 46, 47, 47, 47, 48, 10, 10,
	11, 11, 12, 12, 8, 8, 20, 20, 24, 24,
	49, 49, 49, 26, 26, 25, 29, 29, 30, 30,
	41, 40, 42, 42, 42, 42, 42, 42, 42, 21,
	21, 22, 22, 22, 37, 37, 37, 37, 37, 37,
	37, 39, 39, 39, 39, 34, 34, 34, 34, 50,
	50, 50, 50, 50, 50, 50, 50, 50, 50, 50,
	50, 50, 50, 50, 50, 33, 43, 44, 44, 45,
	38, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 36, 36, 36, 36, 36, 36, 52, 52,
	51, 51, 53, 53, 54, 54,
}
var yyR2 = [...]int{

	0, 0, 1, 3, 1, 1, 5, 2, 3, 0,
	2, 0, 3, 1, 3, 2, 4, 1, 1, 0,
	1, 1, 1, 1, 0, 3, 4, 0, 2, 0,
	2, 1, 1, 1, 3, 1, 1, 3, 1, 1,
	2, 3, 1, 1, 1, 2, 3, 1, 0, 2,
	6, 9, 1, 3, 1, 3, 1, 3, 1, 3,
	4, 5, 5, 0, 1, 1, 3, 1, 1, 3,
	3, 3, 3, 3, 3, 3, 3, 4, 2, 1,
	3, 1, 3, 3, 3, 3, 3, 3, 3, 2,
	2, 3, 3, 2, 2, 5, 5, 5, 5, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 3,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 1, 1, 1, 1, 1, 1, 0, 1,
	0, 1, 0, 1, 1, 1,
}
var yyChk = [...]int{

	-1000, -1, -2, -3, -4, -10, 17, 57, -13, -5,
	15, -12, -11, 5, -1, -14, 18, -6, 16, -52,
	64, 78, -50, 6, 54, 50, 23, 25, 26, 27,
	46, 55, 44, 45, 47, 48, 28, 29, 42, -15,
	20, 19, -7, -9, -47, -48, 59, -46, -41, -50,
	34, -20, -19, -18, -25, -23, -49, 56, -22, -36,
	-37, -40, -41, -34, -42, -39, -43, -45, 59, -50,
	44, 7, 8, 9, -38, 12, -33, 61, 62, 47,
	-29, 53, 37, 63, 13, 11, 51, -12, 24, 59,
	-17, 21, -23, -50, 44, -27, -28, -31, -23, -49,
	78, -50, -9, -4, -50, 24, 78, 24, 31, 30,
	58, 52, 37, 62, 61, 56, 75, 76, 36, 35,
	32, -24, -23, 59, 79, 59, -23, -23, 59, 30,
	58, -41, 59, -23, -23, 59, -8, -50, -23, -16,
	33, 17, 59, 59, 78, -32, 38, 39, -7, 60,
	60, -50, -20, -50, -23, -23, -23, -29, 59, -41,
	52, -23, -23, -23, -23, -23, -23, -23, -23, 60,
	78, 60, -26, -52, -24, -23, -50, 8, -52, -52,
	-29, -29, -4, 60, 78, -16, 54, -52, -27, 50,
	-29, -24, 60, -26, -26, -25, -26, 60, 24, -8,
	-26, -25, -35, 40, 41, 60, 60, 60, 60, 59,
	60, 60, -4, 60,
}
var yyDef = [...]int{

	-2, -2, 2, 4, 5, 0, 0, -2, 11, 9,
	138, 49, 52, 0, 3, 24, 0, 7, 0, 0,
	139, 0, 0, 99, 100, 101, 102, 103, 104, 105,
	106, 107, 108, 109, 110, 111, 112, 113, 114, 29,
	0, 0, 10, 36, 38, 39, 48, 44, 47, 42,
	43, 8, 56, 33, 35, 31, 32, 65, 121, 122,
	123, 124, -2, 126, 127, 128, 129, 130, 48, 81,
	108, 132, 133, 134, 135, 136, 137, 0, 0, 110,
	0, 0, 0, 0, 116, 120, 115, 53, 0, 0,
	6, 0, 27, 81, 108, 12, 13, 19, 17, 18,
	0, 40, 0, 0, 45, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 63, 0, 138, 89, 90, 138, 0,
	0, 78, 48, 93, 94, 48, 0, 54, 30, 25,
	27, 0, 138, 138, 0, 15, 20, 21, 37, 41,
	70, 46, 57, 34, 71, -2, -2, 76, 48, 67,
	0, 84, 85, 86, 87, 88, 91, 92, 119, 66,
	0, 131, 0, 63, 64, 58, 82, 83, 63, 63,
	73, 75, 0, 0, 0, 26, 28, 63, 14, 0,
	77, 59, 60, 0, 0, 0, 0, 50, 0, 55,
	0, 0, 16, 22, 23, 95, -2, -2, 96, 48,
	97, 98, 0, 51,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 63, 3, 3, 3, 76, 3, 3,
	59, 60, 56, 62, 78, 61, 79, 75, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 57,
	3, 58,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 64, 65, 66, 67, 68, 69,
	70, 71, 72, 73, 74, 77,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line grammar/block_query.y:139
		{
			yyVAL.program = nil
			yylex.(*Lexer).program = yyVAL.program
		}
	case 2:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line grammar/block_query.y:144
		{
			yyVAL.program = []Statement{yyDollar[1].statement}
			yylex.(*Lexer).program = yyVAL.program
		}
	case 3:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line grammar/block_query.y:149
		{
			yyVAL.program = append([]Statement{yyDollar[1].statement}, yyDollar[3].program...)
			yylex.(*Lexer).program = yyVAL.program
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line grammar/block_query.y:157
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 5:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line grammar/block_query.y:163
		{
			yyVAL.statement = yyDollar[1].queryexpr
		}
	case 6:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line grammar/block_query.y:168
		{
			yyVAL.queryexpr = SelectQuery{
				WithClause:    yyDollar[1].queryexpr,
				SelectEntity:  yyDollar[2].queryexpr,
				OrderByClause: yyDollar[3].queryexpr,
				LimitClause:   yyDollar[4].queryexpr,
				OffsetClause:  yyDollar[5].queryexpr,
			}
		}
	case 7:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line grammar/block_query.y:181
		{
			yyVAL.queryexpr = SelectEntity{
				SelectClause: yyDollar[1].queryexpr,
				FromClause:   yyDollar[2].queryexpr,
			}
		}
	case 8:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line grammar/block_query.y:191
		{
			yyVAL.queryexpr = SelectClause{
				BaseExpr: NewBaseExpr(yyDollar[1].token), Select: yyDollar[1].token.Literal, Distinct: yyDollar[2].token, Fields: yyDollar[3].queryexprs}
		}
	case 9:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line grammar/block_query.y:198
		{
			yyVAL.queryexpr = nil
		}
	case 10:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line grammar/block_query.y:200
		{
			yyVAL.queryexpr = FromClause{From: yyDollar[1].token.Literal, Tables: yyDollar[2].queryexprs}
		}
	case 11:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line grammar/block_query.y:206
		{
			yyVAL.queryexpr = nil
		}
	case 12:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line grammar/block_query.y:208
		{
			yyVAL.queryexpr = OrderByClause{OrderBy: yyDollar[1].token.Literal + " " + yyDollar[2].token.Literal, Items: yyDollar[3].queryexprs}
		}
	case 13:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line grammar/block_query.y:213
		{
			yyVAL.queryexprs = []QueryExpression{yyDollar[1].queryexpr}
		}
	case 14:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line grammar/block_query.y:214
		{
			yyVAL.queryexprs = append([]QueryExpression{yyDollar[1].queryexpr}, yyDollar[3].queryexprs...)
		}
	case 15:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line grammar/block_query.y:218
		{
			yyVAL.queryexpr = OrderItem{Value: yyDollar[1].queryexpr, Direction: yyDollar[2].token}
		}
	case 16:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line grammar/block_query.y:220
		{
			yyVAL.queryexpr = OrderItem{Value: yyDollar[1].queryexpr, Direction: yyDollar[2].token, Nulls: yyDollar[3].token.Literal, Position: yyDollar[4].token}
		}
	case 17:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line grammar/block_query.y:226
		{
			yyVAL.queryexpr = yyDollar[1].queryexpr
		}
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line grammar/block_query.y:227
		{
			yyVAL.queryexpr = yyDollar[1].queryexpr
		}
	case 19:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line grammar/block_query.y:231
		{
			yyVAL.token = Token{}
		}
	case 20:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line grammar/block_query.y:232
		{
			yyVAL.token = yyDollar[1].token
		}
	case 21:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line grammar/block_query.y:233
		{
			yyVAL.token = yyDollar[1].token
		}
	case 22:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line grammar/block_query.y:237
		{
			yyVAL.token = yyDollar[1].token
		}
	case 23:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line grammar/block_query.y:238
		{
			yyVAL.token = yyDollar[1].token
		}
	case 24:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line grammar/block_query.y:242
		{
			yyVAL.queryexpr = nil
		}
	case 25:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line grammar/block_query.y:244
		{
			yyVAL.queryexpr = LimitClause{BaseExpr: NewBaseExpr(yyDollar[1].token), Limit: yyDollar[1].token.Literal, Value: yyDollar[2].queryexpr, With: yyDollar[3].queryexpr}
		}
	case 26:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line grammar/block_query.y:248
		{
			yyVAL.queryexpr = LimitClause{BaseExpr: NewBaseExpr(yyDollar[1].token), Limit: yyDollar[1].token.Literal, Value: yyDollar[2].queryexpr, Percent: yyDollar[3].token.Literal, With: yyDollar[4].queryexpr}
		}
	case 27:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line grammar/block_query.y:255
		{
			yyVAL.queryexpr = nil
		}
	case 28:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line grammar/block_query.y:259
		{
			yyVAL.queryexpr = LimitWith{With: yyDollar[1].token.Literal, Type: yyDollar[2].token}
		}
	case 29:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line grammar/block_query.y:264
		{
			yyVAL.queryexpr = nil
		}
	case 30:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line grammar/block_query.y:266
		{
			yyVAL.queryexpr = OffsetClause{BaseExpr: NewBaseExpr(yyDollar[1].token), Offset: yyDollar[1].token.Literal, Value: yyDollar[2].queryexpr}
		}
	case 31:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line grammar/block_query.y:272
		{
			yyVAL.queryexpr = yyDollar[1].queryexpr
		}
	case 32:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line grammar/block_query.y:273
		{
			yyVAL.queryexpr = yyDollar[1].queryexpr
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line grammar/block_query.y:276
		{
			yyVAL.queryexpr = Field{Object: yyDollar[1].queryexpr}
		}
	case 34:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line grammar/block_query.y:278
		{
			yyVAL.queryexpr = Field{Object: yyDollar[1].queryexpr, As: yyDollar[2].token.Literal, Alias: yyDollar[3].identifier}
		}
	case 35:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line grammar/block_query.y:281
		{
			yyVAL.queryexpr = Field{Object: yyDollar[1].queryexpr}
		}
	case 36:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line grammar/block_query.y:285
		{
			yyVAL.queryexprs = []QueryExpression{yyDollar[1].queryexpr}
		}
	case 37:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line grammar/block_query.y:287
		{
			yyVAL.queryexprs = append([]QueryExpression{yyDollar[1].queryexpr}, yyDollar[3].queryexprs...)
		}
	case 38:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line grammar/block_query.y:292
		{
			yyVAL.queryexpr = yyDollar[1].table
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line grammar/block_query.y:293
		{
			yyVAL.queryexpr = Table{Object: yyDollar[1].queryexpr}
		}
	case 40:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line grammar/block_query.y:294
		{
			yyVAL.queryexpr = Table{Object: yyDollar[1].queryexpr, Alias: yyDollar[2].identifier}
		}
	case 41:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line grammar/block_query.y:296
		{
			yyVAL.queryexpr = Parentheses{Expr: yyDollar[2].queryexpr}
		}
	case 42:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line grammar/block_query.y:301
		{
			yyVAL.queryexpr = yyDollar[1].identifier
		}
	case 43:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line grammar/block_query.y:305
		{
			yyVAL.queryexpr = Stdin{BaseExpr: NewBaseExpr(yyDollar[1].token), Stdin: yyDollar[1].token.Literal}
		}
	case 44:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line grammar/block_query.y:311
		{
			yyVAL.table = Table{Object: yyDollar[1].queryexpr}
		}
	case 45:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line grammar/block_query.y:315
		{
			yyVAL.table = Table{Object: yyDollar[1].queryexpr, Alias: yyDollar[2].identifier}
		}
	case 46:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line grammar/block_query.y:319
		{
			yyVAL.table = Table{Object: yyDollar[1].queryexpr, As: yyDollar[2].token.Literal, Alias: yyDollar[3].identifier}
		}
	case 47:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line grammar/block_query.y:324
		{
			yyVAL.queryexpr = yyDollar[1].queryexpr
		}
	case 48:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line grammar/block_query.y:330
		{
			yyVAL.queryexpr = nil
		}
	case 49:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line grammar/block_query.y:331
		{
			yyVAL.queryexpr = WithClause{With: yyDollar[1].token.Literal, InlineTables: yyDollar[2].queryexprs}
		}
	case 50:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line grammar/block_query.y:336
		{
			yyVAL.queryexpr = InlineTable{Recursive: yyDollar[1].token, Name: yyDollar[2].identifier, As: yyDollar[3].token.Literal, Query: yyDollar[5].queryexpr.(SelectQuery)}
		}
	case 51:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line grammar/block_query.y:340
		{
			yyVAL.queryexpr = InlineTable{Recursive: yyDollar[1].token, Name: yyDollar[2].identifier, Fields: yyDollar[4].queryexprs, As: yyDollar[6].token.Literal, Query: yyDollar[8].queryexpr.(SelectQuery)}
		}
	case 52:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line grammar/block_query.y:347
		{
			yyVAL.queryexprs = []QueryExpression{yyDollar[1].queryexpr}
		}
	case 53:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line grammar/block_query.y:351
		{
			yyVAL.queryexprs = append([]QueryExpression{yyDollar[1].queryexpr}, yyDollar[3].queryexprs...)
		}
	case 54:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line grammar/block_query.y:357
		{
			yyVAL.queryexprs = []QueryExpression{yyDollar[1].identifier}
		}
	case 55:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line grammar/block_query.y:358
		{
			yyVAL.queryexprs = append([]QueryExpression{yyDollar[1].identifier}, yyDollar[3].queryexprs...)
		}
	case 56:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line grammar/block_query.y:362
		{
			yyVAL.queryexprs = []QueryExpression{yyDollar[1].queryexpr}
		}
	case 57:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line grammar/block_query.y:363
		{
			yyVAL.queryexprs = append([]QueryExpression{yyDollar[1].queryexpr}, yyDollar[3].queryexprs...)
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line grammar/block_query.y:367
		{
			yyVAL.queryexprs = []QueryExpression{yyDollar[1].queryexpr}
		}
	case 59:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line grammar/block_query.y:368
		{
			yyVAL.queryexprs = append([]QueryExpression{yyDollar[1].queryexpr}, yyDollar[3].queryexprs...)
		}
	case 60:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line grammar/block_query.y:373
		{
			yyVAL.queryexpr = AnalyticFunction{BaseExpr: yyDollar[1].identifier.BaseExpr, Name: yyDollar[1].identifier.Literal, Args: yyDollar[3].queryexprs}
		}
	case 61:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line grammar/block_query.y:377
		{
			yyVAL.queryexpr = AnalyticFunction{BaseExpr: NewBaseExpr(yyDollar[1].token), Name: yyDollar[1].token.Literal, Distinct: yyDollar[3].token, Args: yyDollar[4].queryexprs}
		}
	case 62:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line grammar/block_query.y:381
		{
			yyVAL.queryexpr = AnalyticFunction{BaseExpr: NewBaseExpr(yyDollar[1].token), Name: yyDollar[1].token.Literal, Distinct: yyDollar[3].token, Args: []QueryExpression{yyDollar[4].queryexpr}}
		}
	case 63:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line grammar/block_query.y:404
		{
			yyVAL.queryexprs = nil
		}
	case 64:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line grammar/block_query.y:405
		{
			yyVAL.queryexprs = yyDollar[1].queryexprs
		}
	case 65:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line grammar/block_query.y:410
		{
			yyVAL.queryexpr = AllColumns{BaseExpr: NewBaseExpr(yyDollar[1].token)}
		}
	case 66:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line grammar/block_query.y:417
		{
			yyVAL.queryexpr = RowValue{BaseExpr: NewBaseExpr(yyDollar[1].token), Value: ValueList{Values: yyDollar[2].queryexprs}}
		}
	case 67:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line grammar/block_query.y:421
		{
			yyVAL.queryexpr = RowValue{BaseExpr: yyDollar[1].queryexpr.GetBaseExpr(), Value: yyDollar[1].queryexpr}
		}
	case 68:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line grammar/block_query.y:428
		{
			yyVAL.queryexprs = []QueryExpression{yyDollar[1].queryexpr}
		}
	case 69:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line grammar/block_query.y:432
		{
			yyVAL.queryexprs = append([]QueryExpression{yyDollar[1].queryexpr}, yyDollar[3].queryexprs...)
		}
	case 70:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line grammar/block_query.y:438
		{
			yyVAL.queryexpr = Subquery{BaseExpr: NewBaseExpr(yyDollar[1].token), Query: yyDollar[2].queryexpr.(SelectQuery)}
		}
	case 71:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line grammar/block_query.y:445
		{
			var item1 []QueryExpression
			var item2 []QueryExpression

			c1, ok := yyDollar[1].queryexpr.(Concat)
			if ok {
				item1 = c1.Items
			} else {
				item1 = []QueryExpression{yyDollar[1].queryexpr}
			}

			c2, ok := yyDollar[3].queryexpr.(Concat)
			if ok {
				item2 = c2.Items
			} else {
				item2 = []QueryExpression{yyDollar[3].queryexpr}
			}

			yyVAL.queryexpr = Concat{Items: append(item1, item2...)}
		}
	case 72:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line grammar/block_query.y:469
		{
			yyVAL.queryexpr = Comparison{LHS: yyDollar[1].queryexpr, Operator: yyDollar[2].token.Literal, RHS: yyDollar[3].queryexpr}
		}
	case 73:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line grammar/block_query.y:473
		{
			yyVAL.queryexpr = Comparison{LHS: yyDollar[1].queryexpr, Operator: yyDollar[2].token.Literal, RHS: yyDollar[3].queryexpr}
		}
	case 74:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line grammar/block_query.y:477
		{
			yyVAL.queryexpr = Comparison{LHS: yyDollar[1].queryexpr, Operator: "=", RHS: yyDollar[3].queryexpr}
		}
	case 75:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line grammar/block_query.y:481
		{
			yyVAL.queryexpr = Comparison{LHS: yyDollar[1].queryexpr, Operator: "=", RHS: yyDollar[3].queryexpr}
		}
	case 76:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line grammar/block_query.y:485
		{
			yyVAL.queryexpr = In{In: yyDollar[2].token.Literal, LHS: yyDollar[1].queryexpr, Values: yyDollar[3].queryexpr}
		}
	case 77:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line grammar/block_query.y:489
		{
			yyVAL.queryexpr = In{In: yyDollar[3].token.Literal, LHS: yyDollar[1].queryexpr, Values: yyDollar[4].queryexpr, Negation: yyDollar[2].token}
		}
	case 78:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line grammar/block_query.y:494
		{
			yyVAL.queryexpr = Exists{Exists: yyDollar[1].token.Literal, Query: yyDollar[2].queryexpr.(Subquery)}
		}
	case 79:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line grammar/block_query.y:500
		{
			yyVAL.queryexprs = []QueryExpression{yyDollar[1].queryexpr}
		}
	case 80:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line grammar/block_query.y:504
		{
			yyVAL.queryexprs = append([]QueryExpression{yyDollar[1].queryexpr}, yyDollar[3].queryexprs...)
		}
	case 81:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line grammar/block_query.y:510
		{
			yyVAL.queryexpr = FieldReference{BaseExpr: yyDollar[1].identifier.BaseExpr, Column: yyDollar[1].identifier}
		}
	case 82:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line grammar/block_query.y:514
		{
			yyVAL.queryexpr = FieldReference{BaseExpr: yyDollar[1].identifier.BaseExpr, View: yyDollar[1].identifier, Column: yyDollar[3].identifier}
		}
	case 83:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line grammar/block_query.y:518
		{
			yyVAL.queryexpr = ColumnNumber{BaseExpr: yyDollar[1].identifier.BaseExpr, View: yyDollar[1].identifier, Number: value.NewIntegerFromString(yyDollar[3].token.Literal)}
		}
	case 84:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line grammar/block_query.y:524
		{
			yyVAL.queryexpr = Arithmetic{LHS: yyDollar[1].queryexpr, Operator: int('+'), RHS: yyDollar[3].queryexpr}
		}
	case 85:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line grammar/block_query.y:525
		{
			yyVAL.queryexpr = Arithmetic{LHS: yyDollar[1].queryexpr, Operator: int('-'), RHS: yyDollar[3].queryexpr}
		}
	case 86:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line grammar/block_query.y:526
		{
			yyVAL.queryexpr = Arithmetic{LHS: yyDollar[1].queryexpr, Operator: int('*'), RHS: yyDollar[3].queryexpr}
		}
	case 87:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line grammar/block_query.y:527
		{
			yyVAL.queryexpr = Arithmetic{LHS: yyDollar[1].queryexpr, Operator: int('/'), RHS: yyDollar[3].queryexpr}
		}
	case 88:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line grammar/block_query.y:528
		{
			yyVAL.queryexpr = Arithmetic{LHS: yyDollar[1].queryexpr, Operator: int('%'), RHS: yyDollar[3].queryexpr}
		}
	case 89:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line grammar/block_query.y:529
		{
			yyVAL.queryexpr = UnaryArithmetic{Operand: yyDollar[2].queryexpr, Operator: yyDollar[1].token}
		}
	case 90:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line grammar/block_query.y:530
		{
			yyVAL.queryexpr = UnaryArithmetic{Operand: yyDollar[2].queryexpr, Operator: yyDollar[1].token}
		}
	case 91:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line grammar/block_query.y:535
		{
			yyVAL.queryexpr = Logic{LHS: yyDollar[1].queryexpr, Operator: yyDollar[2].token, RHS: yyDollar[3].queryexpr}
		}
	case 92:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line grammar/block_query.y:539
		{
			yyVAL.queryexpr = Logic{LHS: yyDollar[1].queryexpr, Operator: yyDollar[2].token, RHS: yyDollar[3].queryexpr}
		}
	case 93:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line grammar/block_query.y:542
		{
			yyVAL.queryexpr = UnaryLogic{Operand: yyDollar[2].queryexpr, Operator: yyDollar[1].token}
		}
	case 94:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line grammar/block_query.y:543
		{
			yyVAL.queryexpr = UnaryLogic{Operand: yyDollar[2].queryexpr, Operator: yyDollar[1].token}
		}
	case 95:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line grammar/block_query.y:548
		{
			yyVAL.queryexpr = AggregateFunction{BaseExpr: yyDollar[1].identifier.BaseExpr, Name: yyDollar[1].identifier.Literal, Distinct: yyDollar[3].token, Args: yyDollar[4].queryexprs}
		}
	case 96:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line grammar/block_query.y:552
		{
			yyVAL.queryexpr = AggregateFunction{BaseExpr: NewBaseExpr(yyDollar[1].token), Name: yyDollar[1].token.Literal, Distinct: yyDollar[3].token, Args: yyDollar[4].queryexprs}
		}
	case 97:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line grammar/block_query.y:556
		{
			yyVAL.queryexpr = AggregateFunction{BaseExpr: NewBaseExpr(yyDollar[1].token), Name: yyDollar[1].token.Literal, Distinct: yyDollar[3].token, Args: yyDollar[4].queryexprs}
		}
	case 98:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line grammar/block_query.y:560
		{
			yyVAL.queryexpr = AggregateFunction{BaseExpr: NewBaseExpr(yyDollar[1].token), Name: yyDollar[1].token.Literal, Distinct: yyDollar[3].token, Args: []QueryExpression{yyDollar[4].queryexpr}}
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line grammar/block_query.y:567
		{
			yyVAL.identifier = Identifier{BaseExpr: NewBaseExpr(yyDollar[1].token), Literal: yyDollar[1].token.Literal, Quoted: yyDollar[1].token.Quoted}
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line grammar/block_query.y:571
		{
			yyVAL.identifier = Identifier{BaseExpr: NewBaseExpr(yyDollar[1].token), Literal: yyDollar[1].token.Literal, Quoted: yyDollar[1].token.Quoted}
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line grammar/block_query.y:575
		{
			yyVAL.identifier = Identifier{BaseExpr: NewBaseExpr(yyDollar[1].token), Literal: yyDollar[1].token.Literal, Quoted: yyDollar[1].token.Quoted}
		}
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line grammar/block_query.y:579
		{
			yyVAL.identifier = Identifier{BaseExpr: NewBaseExpr(yyDollar[1].token), Literal: yyDollar[1].token.Literal, Quoted: yyDollar[1].token.Quoted}
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line grammar/block_query.y:583
		{
			yyVAL.identifier = Identifier{BaseExpr: NewBaseExpr(yyDollar[1].token), Literal: yyDollar[1].token.Literal, Quoted: yyDollar[1].token.Quoted}
		}
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line grammar/block_query.y:587
		{
			yyVAL.identifier = Identifier{BaseExpr: NewBaseExpr(yyDollar[1].token), Literal: yyDollar[1].token.Literal, Quoted: yyDollar[1].token.Quoted}
		}
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line grammar/block_query.y:591
		{
			yyVAL.identifier = Identifier{BaseExpr: NewBaseExpr(yyDollar[1].token), Literal: yyDollar[1].token.Literal, Quoted: yyDollar[1].token.Quoted}
		}
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line grammar/block_query.y:595
		{
			yyVAL.identifier = Identifier{BaseExpr: NewBaseExpr(yyDollar[1].token), Literal: yyDollar[1].token.Literal, Quoted: yyDollar[1].token.Quoted}
		}
	case 107:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line grammar/block_query.y:599
		{
			yyVAL.identifier = Identifier{BaseExpr: NewBaseExpr(yyDollar[1].token), Literal: yyDollar[1].token.Literal, Quoted: yyDollar[1].token.Quoted}
		}
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line grammar/block_query.y:603
		{
			yyVAL.identifier = Identifier{BaseExpr: NewBaseExpr(yyDollar[1].token), Literal: yyDollar[1].token.Literal, Quoted: yyDollar[1].token.Quoted}
		}
	case 109:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line grammar/block_query.y:607
		{
			yyVAL.identifier = Identifier{BaseExpr: NewBaseExpr(yyDollar[1].token), Literal: yyDollar[1].token.Literal, Quoted: yyDollar[1].token.Quoted}
		}
	case 110:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line grammar/block_query.y:611
		{
			yyVAL.identifier = Identifier{BaseExpr: NewBaseExpr(yyDollar[1].token), Literal: yyDollar[1].token.Literal, Quoted: yyDollar[1].token.Quoted}
		}
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line grammar/block_query.y:615
		{
			yyVAL.identifier = Identifier{BaseExpr: NewBaseExpr(yyDollar[1].token), Literal: yyDollar[1].token.Literal, Quoted: yyDollar[1].token.Quoted}
		}
	case 112:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line grammar/block_query.y:619
		{
			yyVAL.identifier = Identifier{BaseExpr: NewBaseExpr(yyDollar[1].token), Literal: yyDollar[1].token.Literal, Quoted: yyDollar[1].token.Quoted}
		}
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line grammar/block_query.y:623
		{
			yyVAL.identifier = Identifier{BaseExpr: NewBaseExpr(yyDollar[1].token), Literal: yyDollar[1].token.Literal, Quoted: yyDollar[1].token.Quoted}
		}
	case 114:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line grammar/block_query.y:627
		{
			yyVAL.identifier = Identifier{BaseExpr: NewBaseExpr(yyDollar[1].token), Literal: yyDollar[1].token.Literal, Quoted: yyDollar[1].token.Quoted}
		}
	case 115:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line grammar/block_query.y:633
		{
			yyVAL.queryexpr = NewNullValueFromString(yyDollar[1].token.Literal)
		}
	case 116:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line grammar/block_query.y:637
		{
			yyVAL.variable = Variable{BaseExpr: NewBaseExpr(yyDollar[1].token), Name: yyDollar[1].token.Literal}
		}
	case 117:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line grammar/block_query.y:644
		{
			yyVAL.variables = []Variable{yyDollar[1].variable}
		}
	case 118:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line grammar/block_query.y:647
		{
			yyVAL.variables = append([]Variable{yyDollar[1].variable}, yyDollar[3].variables...)
		}
	case 119:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line grammar/block_query.y:652
		{
			yyVAL.queryexpr = VariableSubstitution{Variable: yyDollar[1].variable, Value: yyDollar[3].queryexpr}
		}
	case 120:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line grammar/block_query.y:659
		{
			yyVAL.queryexpr = NewTernaryValueFromString(yyDollar[1].token.Literal)
		}
	case 121:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line grammar/block_query.y:665
		{
			yyVAL.queryexpr = yyDollar[1].queryexpr
		}
	case 122:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line grammar/block_query.y:666
		{
			yyVAL.queryexpr = yyDollar[1].queryexpr
		}
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line grammar/block_query.y:667
		{
			yyVAL.queryexpr = yyDollar[1].queryexpr
		}
	case 124:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line grammar/block_query.y:668
		{
			yyVAL.queryexpr = yyDollar[1].queryexpr
		}
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line grammar/block_query.y:669
		{
			yyVAL.queryexpr = yyDollar[1].queryexpr
		}
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line grammar/block_query.y:670
		{
			yyVAL.queryexpr = yyDollar[1].queryexpr
		}
	case 127:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line grammar/block_query.y:671
		{
			yyVAL.queryexpr = yyDollar[1].queryexpr
		}
	case 128:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line grammar/block_query.y:672
		{
			yyVAL.queryexpr = yyDollar[1].queryexpr
		}
	case 129:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line grammar/block_query.y:673
		{
			yyVAL.queryexpr = yyDollar[1].variable
		}
	case 130:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line grammar/block_query.y:674
		{
			yyVAL.queryexpr = yyDollar[1].queryexpr
		}
	case 131:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line grammar/block_query.y:675
		{
			yyVAL.queryexpr = Parentheses{Expr: yyDollar[2].queryexpr}
		}
	case 132:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line grammar/block_query.y:680
		{
			yyVAL.queryexpr = NewStringValue(yyDollar[1].token.Literal)
		}
	case 133:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line grammar/block_query.y:684
		{
			yyVAL.queryexpr = NewIntegerValueFromString(yyDollar[1].token.Literal)
		}
	case 134:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line grammar/block_query.y:688
		{
			yyVAL.queryexpr = NewFloatValueFromString(yyDollar[1].token.Literal)
		}
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line grammar/block_query.y:692
		{
			yyVAL.queryexpr = yyDollar[1].queryexpr
		}
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line grammar/block_query.y:696
		{
			yyVAL.queryexpr = NewDatetimeValueFromString(yyDollar[1].token.Literal)
		}
	case 137:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line grammar/block_query.y:700
		{
			yyVAL.queryexpr = yyDollar[1].queryexpr
		}
	case 138:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line grammar/block_query.y:706
		{
			yyVAL.token = Token{}
		}
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line grammar/block_query.y:707
		{
			yyVAL.token = yyDollar[1].token
		}
	case 140:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line grammar/block_query.y:711
		{
			yyVAL.token = Token{}
		}
	case 141:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line grammar/block_query.y:712
		{
			yyVAL.token = yyDollar[1].token
		}
	case 142:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line grammar/block_query.y:715
		{
			yyVAL.token = Token{}
		}
	case 143:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line grammar/block_query.y:716
		{
			yyVAL.token = yyDollar[1].token
		}
	case 144:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line grammar/block_query.y:720
		{
			yyVAL.token = yyDollar[1].token
		}
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line grammar/block_query.y:724
		{
			yyDollar[1].token.Token = COMPARISON_OP
			yyVAL.token = yyDollar[1].token
		}
	}
	goto yystack /* stack new state and value */
}
